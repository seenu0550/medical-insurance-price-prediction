# -*- coding: utf-8 -*-
"""Medical Insurance Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FqD9xhi1okaoMpM0DpNiYbmNtAbkspRC

1.Importing the required libraries
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib as pt
import warnings
warnings.filterwarnings("ignore")

"""2.Loading the dataset named "insurance.csv"
"""

df=pd.read_csv("/insurance.csv")
df

df.info()

df.describe()

"""3.Exploratory Data Analysis"""

df.isnull().sum()

import matplotlib.pyplot as plt
features = ['sex', 'smoker', 'region']

plt.subplots(figsize=(20, 10))
for i, col in enumerate(features):
    plt.subplot(1, 3, i + 1)

    x = df[col].value_counts()
    plt.pie(x.values,
            labels=x.index,
            autopct='%1.1f%%')

plt.show()

features = ['sex', 'children', 'smoker', 'region']
plt.subplots(figsize=(20, 10))
for i, col in enumerate(features):
    plt.subplot(2, 2, i + 1)
    df.groupby(col)['expenses'].mean().astype(float).plot.bar()
plt.show()

import seaborn as sns

features = ['age', 'bmi']

plt.subplots(figsize=(17, 7))
for i, col in enumerate(features):
    plt.subplot(1, 2, i + 1)
    sns.scatterplot(data=df, x=col,
                   y='expenses',
                   hue='smoker')
plt.show()

"""Data Preprocessing"""

#dropping the duplicates in the data
df.drop_duplicates(inplace=True)
sns.boxplot(df['age'])
#we can see there are no outliers in 'age' column

sns.boxplot(df['bmi'])

#Due to the presence of outliers present in bmi column
# we need to treat the outliers by replacing the values with mean as the bmi column consists of continuous data.

Q1=df['bmi'].quantile(0.25)
Q2=df['bmi'].quantile(0.5)
Q3=df['bmi'].quantile(0.75)
iqr=Q3-Q1
lowlim=Q1-1.5*iqr
upplim=Q3+1.5*iqr
print(lowlim)
print(upplim)

!pip install feature_engine
from feature_engine.outliers import ArbitraryOutlierCapper
arb=ArbitraryOutlierCapper(min_capping_dict={'bmi':13.6749},max_capping_dict={'bmi':47.315})
df[['bmi']]=arb.fit_transform(df[['bmi']])
sns.boxplot(df['bmi'])
#now we have successfully removed the outliers

"""Data wrangling is a technique to ensure whether the data follow normal or standard distribution and encode the discrete data for prediction."""

df['bmi'].skew()
df['age'].skew()
#Data in both the age and BMI column approximately follow a Normal distribution which is a good point with respect to the model's learning.

"""Encoding is to be done for discrete categorical data (sex,bmi,region)."""

df['sex']=df['sex'].map({'male':0,'female':1})
df['smoker']=df['smoker'].map({'yes':1,'no':0})
df['region']=df['region'].map({'northwest':0, 'northeast':1,'southeast':2,'southwest':3})

"""Now the discrete data is encoded and the data preprocessing and data wrangling part is completed.Now we can go for model development."""

df.corr()

"""**Model Development**
There are so many state-of-the-art ML models available in academia but some model fits better to some problem while some fit better than other. So, to make this decision we split our data into training and validation data. Then we use the validation data to choose the model with the highest performance.
"""

